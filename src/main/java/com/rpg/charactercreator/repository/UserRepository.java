package com.rpg.charactercreator.repository;

import com.rpg.charactercreator.model.User;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;

import java.util.List;
import java.util.Optional;

/**
 * üßë‚Äçüíº UserRepository
 * Interface f√∂r att hantera databasoperationer relaterade till User-entiteten.
 * Anv√§nder Spring Data JPA f√∂r att f√∂renkla CRUD och custom queries.
 */
public interface UserRepository extends JpaRepository<User, Long> {

    /**
     * üîç Hitta anv√§ndare baserat p√• e-postadress (case-insensitive).
     *
     * @param email e-postadress att s√∂ka efter
     * @return Optional med anv√§ndare om den finns
     */
    Optional<User> findByEmail(String email);

    /**
     * ‚úÖ Kontrollera om en anv√§ndare med en viss e-postadress redan finns.
     *
     * @param email e-postadress att kontrollera
     * @return true om e-postadressen finns, annars false
     */
    boolean existsByEmail(String email);

    /**
     * üßÆ H√§mta anv√§ndare som har fler √§n ett visst antal karakt√§rer.
     * Anv√§nder native SQL och subquery f√∂r att r√§kna karakt√§rer per anv√§ndare.
     *
     * @param count Antal karakt√§rer som tr√∂skel
     * @return Lista √∂ver anv√§ndare med fler √§n {count} karakt√§rer
     */
    @Query(
            value = """
            SELECT * FROM user
            WHERE user_id IN (
                SELECT user_id
                FROM characters
                GROUP BY user_id
                HAVING COUNT(*) > :count
            )
            """,
            nativeQuery = true
    )
    List<User> findUsersWithMoreThanXCharacters(@Param("count") int count);
}
